# Simple Substitution Cipher Hacker
# http://inventwithpython.com/hacking (BSD Licensed)

import os, re, copy, pprint, pyperclip, simpleSubCipher, makeWordPatterns

if not os.path.exists('wordPatterns.py'):
	makeWordPatterns.main() # create the wordPatterns.py file
import wordPatterns

LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
nonLettersOrSpacePattern = re.compile('[^A-Z\s]')

def main():
	message = 'Sy l nlx sr pyyacao l ylwj eiswi upar lulsxrj isr sxrjsxwjr, ia esmm rwctjsxsza sj wmpramh, lxo txmarr jia aqsoaxwa sr pqaceiamnsxu, ia esmm caytra jp famsaqa sj. Sy, px jia pjiac ilxo, ia sr pyyacao rpnajisxu eiswi lyypcor l calrpx ypc lwjsxu sx lwwpcolxwa jp isr sxrjsxwjr, ia esmm lwwabj sj aqax px jia rmsuijarj aqsoaxwa. Jia pcsusx py nhjir sr agbmlsxao sx jisr elh. -Facjclxo Ctrramm'

	# Determine the possible valid ciphertext translations.
	print('Hacking...')
	letterMapping = hackSimpleSub(message)

	# Display the results to the user.
	print('Mapping:')
	pprint.pprint(letterMapping)
	print()
	print('Original ciphertext:')
	print(message)
	print()
	print('Copying hacked message to clipboard:')
	hackedMessage = decryptWithCipherletterMapping(message, letterMapping)
	pyperclip.copy(hackedMessage)
	print(hackedMessage)


def getBlankCipherletterMapping():
	# Returns a dictionary value that is a blank cipherletter mapping.
	return {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': [], 'H': [], 'I': [], 'J': [], 'K': [], 'L': [], 'M': [], 'N': [], 'O': [], 'P': [], 'Q': [], 'R': [], 'S': [], 'T': [], 'U': [], 'V': [], 'W': [], 'X': [], 'Y': [], 'Z': [], }


def addLettersToMapping(letterMapping, cipherword, candidate):
	# The letterMapping parameter is a "Cipherletter mapping" dictionary
	# value that the return value of this function starts as a copy of.
	# The cipherword parameter is a string value of the ciphertext word.
	# The candidate parameter is a possible English word that the
	# cipherword could decrypt to.
	
	# This function adds the letters of the candidate as potential
	# decryption letters for the cipherletters in the cipherletter
	# mapping.
	
	letterMapping = copy.deepcopy(letterMapping)
	for i in range(len(cipherword)):
		if candidate[i] not in letterMapping[cipherword[i]]:
			letterMapping[cipherword[i]].append(candidate[i])
	return letterMapping


def intersectMappings(mapA, mapB):
	# To intersect two maps, create a blank map, and then add only the 
	# potential decryption letters if they exist in BOTH maps.
	intersectedMapping = getBlankCipherletterMapping()
	for letter in LETTERS:

		# An empty list means "any letter is possible". In this case just
		# copy the other map entirely.
		if mapA[letter] == []:
			intersectedMapping[letter] = copy.deepcopy(mapB[letter])
		elif mapB[letter] == []:
			intersectedMapping[letter] = copy.deepcopy(mapA[letter])
		else:
			# If a letter in mapA[letter] exists in mapB[letter], add
			# that letter to intersectedMapping[letter].
			for mappedLetter in mapB[letter]:
				if mappedLetter in mapB[letter]:
					intersectedMapping[letter].append(mappedLetter)

	return intersectedMapping


def removeSolvedLettersFromMapping(letterMapping):
	# Cipher letters in the mapping that map to only one letter are
	# "solved" and can be removed from the other letters.
	# For example, if 'A' maps to potential letters ['M', 'N'], and 'B'
	# maps to ['N'], then we know that 'B' must map to 'N', so we can
	# remove 'N' from the list of what 'A' could map to. So 'A' then maps
	# 